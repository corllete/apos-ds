{% extends dsPreview %}
{% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}
{% import "preview/_toolbar.html" as toolbar %}

{% block css %}
<style>
  .ds-demo-type-color {
    color: white;
  }
  .ds-demo-type-color-bg {
    background-color: #ff5555;
  }
  .box {
    border: 2px solid #f0f0f0;
    {# width: 45%; #}
  }
</style>
{% endblock %}

{% block tagline %}
  Typography tools to build better design systems.
{% endblock %}

{% block actionbar %}
  {{ toolbar.actionToggleCode(true) }}
{% endblock %}

{% block preview %}
  {% dssection 'Headings' %}
    {% dscodecell 6, 'njk', { toggle: false } %}
      {% raw %}
        {# Usage #}
        {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

        {# Render in grid cell #}
        {{ types.heading(headings, options) }}
        {# No grid #}
        {{ types.headings(headings, options) }}
      {% endraw %}
    {% enddscodecell %}
    {% dscell 4 %}
      <div class="ds-typography--code">
        General use of the heading macro. When rendered with grid, 
        <code>options.span</code> controls the cell span. 
      </div>
    {% enddscell %}
  {% enddssection %}

  {% dssection 'Heading basic example' %}
    {% dsrow %}
      <div class="ds-typography--code">
        Basic headings render based on provided font sizes, span 12 (max). 
        It renders <code>h*</code> tags with margin reset.
        The rest is up to your global application styles. 
      </div>
    {% enddsrow %}
    {{ types.heading([98,28,21,16,14,12], { span: 12 }) }}
    {% dscodecell 12, 'njk' %}
      {% raw %}
        {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

        {{ types.heading([98,28,21,16,14,12], { span: 12 }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading truncate' %}
    {% dsrow %}
      <div class="ds-typography--code">
        You may avoid truncating and showing multi-row heading with <code>truncate: false</code> option. 
      </div>
    {% enddsrow %}
    {{ types.heading([98], { span: 12, truncate: false }) }}
    {% dscodecell 12, 'njk' %}
      {% raw %}
        {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

        {{ types.heading([98], { span: 12, truncate: false }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Number of headings' %}
    {% dsrow %}
      <div class="ds-typography--code">
        Passing a number instead of array will render the number of headings. 
        It renders <code>h{number}</code> tags with margin reset.
        The rest is up to your global application styles.
        The size will be auto-detected and replaced with Javascript via the 
        <code>detect: true</code> option. Detection must be set explicit due to 
        performance reasons.
      </div>
    {% enddsrow %}
    {{ types.heading(3, { span: 12, detect: true }) }}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading(3, { span: 12, detect: true }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading - base options' %}
    {{ types.heading(1, { 
        span: 3,
        label: 'Caption {level}',
        background: '#ff5555', 
        details: true, 
        single: true, 
        detect: true 
    }) }}
    {% dscell 4 %}
      <div>
        Pass number of options to render mixed predefined and auto-detected values.
        Detection must be set explicit due to performance reasons.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading(1, { 
        span: 3,
        label: 'Caption {level}',
        background: '#ff5555', 
        details: true, 
        single: true, 
        detect: true 
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading contrast rating' %}
    {% dsrow %}
      <div class="ds-typography--code">
        Detect automatically the contrast rating according to WCAG 2.0 standards via option <code>rating: true</code>.
        <code>detect: true</code> is not required in order this to work properly.
      </div>
    {% enddsrow %}
    {{ types.heading([38], { 
      span: 3, 
      color: '#c0c0c0',
      background: '#ffffff', 
      metaColor: '#000',
      rating: true,
      single: true
    }) }}
    {{ types.heading([38], { 
      span: 3, 
      color: '#ffffff',
      background: '#ff5555', 
      metaColor: '#ffffff',
      rating: true,
      single: true
    }) }}
    {{ types.heading([38], { 
      span: 3, 
      background: '#ffffff', 
      rating: true,
      single: true
    }) }}
    {{ types.heading([38], { 
      span: 3, 
      background: 'rgba(255, 255, 255, 0.1)', 
      rating: true,
      single: true
    }) }}

    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading([38], { 
        span: 4, 
        color: '#ffffff',
        background: '#ff5555', 
        metaColor: '#ffffff',
        rating: true,
        single: true
      }) }}
      {{ types.heading([38], { 
        span: 4, 
        rating: true,
        background: '#ffffff', 
        single: true
      }) }}
      {{ types.heading([38], { 
        span: 4, 
        rating: true,
        background: 'rgba(255, 255, 255, 0.1)', 
        single: true,
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading - auto detect by class' %}
    {{ types.heading(['ds-demo-type-color'], { 
      span: 6,
      cls: 'ds-demo-type-color-bg',
      metaColor: 'white',
      single: true,
      details: true,
      detect: true
    }) }}
    {% dscell 4 %}
      {% dshint '', { cls: 'ds-content-block' } %}
        When providing classes it is good to set the <code>options.metaColor</code> to match exactly
        the heading color. The meta details will use that color with appropriate opacity.
      {% enddshint %}
      <div class="ds-typography--code">
        Pass classes as heading items and auto-detected the values. 
        The background color of the preview can be controlled by <code>options.cls</code>
        CSS classes used here are provided via {%raw%}<code>{% block css %}</code>{%endraw%} in the current story. 
        Detection must be set explicit due to performance reasons.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading(['ds-demo-type-color'], { 
        span: 6,
        cls: 'ds-demo-type-color-bg',
        metaColor: 'white',
        single: true,
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading - array of objects' %}
    {{ types.heading(
      [
        {
          level: 2,
          cls: 'ds-demo-type-color',
          varName: '$ds-caption-text-color'
        }
      ], 
      { 
        span: 4,
        label: 'Caption {level}',
        metaColor: 'white',
        cls: 'ds-demo-type-color-bg',
        showClass: true,
        single: true,
        details: true,
        background: true,
        detect: true
      }
    ) }}
    {% dscell 4 %}
      <div>
        Provide array of objects argument for every heading instead size numbers or string classes.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading(
        [
          {
            level: 2,
            cls: 'ds-demo-type-color',
            varName: '$ds-caption-text-color'
          }
        ], 
        { 
          span: 4,
          label: 'Caption {level}',
          metaColor: 'white',
          cls: 'ds-demo-type-color-bg',
          showClass: true,
          single: true,
          details: true,
          background: true,
          detect: true
        }
      ) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Heading - properties and options' %}
    {{ types.heading(
      [
        {
          level: 2,
          label: 'Heading 2',
          font: 'Roboto',
          size: '28px',
          weight: '400',
          tracking: '-2',
          line: 'normal',
          padding: '5px',
          margin: '0',
          cls: 'ds-demo-type-color',
          className: '.some-slass-as-info, h2',
          varName: '$ds-heading-text-color',
          truncate: true
        }
      ], 
      { 
        span: 4,
        font: 'Helvetica',
        color: '#ffffff',
        label: 'Caption {level}',
        metaColor: 'white',
        background: '#ff5555',
        cls: 'container-class',
        single: true,
        truncate: false,
        details: true
      }
    ) }}
    {% dscell 6 %}
      <div class="ds-typography--code">
        All possible heading object and options properties. 
        <code>color, background, image</code> can be only set in options.
        <code>font, weight, tracking, line, padding, label, truncate, showClass</code> can be set as defaults in options
        and overridden by the heading items.
        <p>
          <code>showClass: true</code> would show in the header the <code>item.cls</code> property (added to your heading tag to modify the presentation) 
          if you provided one.<br />

          <code>className</code> property will be shown in details if the above is not true. It is just a label, informational, it's in no
          way used to alter the presentation.<br />

          <code>options.cls</code> is DIFFERENT than <code>item.cls</code>. The former is used to adjust the entire container
          of the helper component (most useful for bacgrounds), the latter is applied to YOUR presentation tag (h1, h2, etc).<br />
          
          <code>background</code> and <code>image</code> options can be
          boolean <code>true</code> or color/image url. In the former case they would be only shown in details 
          and their values will be auto detected from the css computed data (requires force detect option).
        </p>
        <p>
          <code>margin</code> doesn't make sense in typography context, but you still have 
          the chance to force it. Class options will be overriden by the manual values (style tag property) for both
          options and heading objects. 
        </p>
        <p> 
          <code>color, weight, tracking, line</code> could have boolean value when auto-detect and details are enabled in which 
          case they will be added in the details section.
        </p>
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.heading(
        [
          {
            level: 2,
            label: 'Heading 2',
            font: 'Roboto',
            size: '28px',
            weight: '400',
            tracking: '-2',
            line: 'normal',
            padding: '5px',
            margin: '0',
            cls: 'ds-demo-type-color',
            className: '.some-slass-as-info, h2',
            varName: '$ds-heading-text-color',
            truncate: true
          }
        ], 
        { 
          span: 4,
          font: 'Helvetica',
          color: '#ffffff',
          label: 'Caption {level}',
          metaColor: 'white',
          background: '#ff5555',
          cls: 'container-class',
          single: true,
          truncate: false,
          details: true
        }
      ) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraphs' %}
    {% dscodecell 6, 'njk', { toggle: false } %}
      {% raw %}
      {# Usage #}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {# Render in grid cell #}
      {{ types.paragraph(items, options) }}
      {# No grid #}
      {{ types.paragraphs(items, options) }}
      {% endraw %}
    {% enddscodecell %}
    {% dscell 4 %}
      <div class="ds-typography--code">
        General use of the paragraph macro. When rendered with grid, 
        <code>options.span</code> controls the cell span. 
      </div>
    {% enddscell %}
  {% enddssection %}

  {% dssection 'Paragraph basic example' %}
    {{ types.paragraph(['20/30', '15/22.5'], { span: 6, background: '#f8f8f8' }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        Basic paragraphs render based on provided font sizes/line height and background color and span options. 
        It renders <code>p</code> applying only the provided options with no additional styling coming from the design system.
        The rest is up to your global application styles. 
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph(['20/30', '15/22.5'], { span: 6, background: '#f8f8f8' }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraph options' %}
    {{ types.paragraph(['20/30', '15/22.5'], { 
      span: 4, 
      color: '#ffffff',
      metaColor: '#ffffff',
      background: '#ff5555', 
      label: 'Custom label',
      weight: 400,
      tracking: 'normal',
      small: true,
      details: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        The paragraph rendering is controlled by number of options. 
        Some of them serve as defaults for the paragraph item which is being rendered, others
        control the global rendering. Inspect the code of this example for more details. 
        The length of the text is controlled by boolean options: <code>xsmall | small | medium | large (default)</code>
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph(['20/30', '15/22.5'], { 
        span: 4, 
        color: '#ffffff',
        metaColor: '#ffffff',
        background: '#ff5555', 
        label: 'Custom label',
        weight: 400,
        tracking: 'normal',
        small: true,
        details: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraph contrast rating' %}
    {% dsrow %}
      <div class="ds-typography--code">
        Detect automatically the contrast rating according to WCAG 2.0 standards via option <code>rating: true</code>.
        <code>detect: true</code> is not required in order this to work properly.
      </div>
    {% enddsrow %}
    {{ types.paragraph(['20/30'], { 
      span: 3, 
      color: '#c0c0c0',
      background: '#ffffff', 
      metaColor: '#000',
      rating: true,
      small: true
    }) }}
    {{ types.paragraph(['20/30'], { 
      span: 3, 
      color: '#ffffff',
      background: '#ff5555', 
      metaColor: '#ffffff',
      rating: true,
      small: true
    }) }}
    {{ types.paragraph(['20/30'], { 
      span: 3, 
      background: '#ffffff', 
      rating: true,
      small: true
    }) }}
    {{ types.paragraph(['20/30'], { 
      span: 3, 
      background: 'rgba(255, 255, 255, 0.1)', 
      rating: true,
      small: true
    }) }}
    
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph(['20/30'], { 
        span: 4, 
        color: '#ffffff',
        background: '#ff5555', 
        metaColor: '#ffffff',
        rating: true,
        small: true
      }) }}
      {{ types.paragraph(['20/30'], { 
        span: 4, 
        rating: true,
        background: '#ffffff', 
        small: true
      }) }}
      {{ types.paragraph(['20/30'], { 
        span: 4, 
        rating: true,
        background: 'rgba(255, 255, 255, 0.1)', 
        small: true,
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraph autodetect details' %}
    {{ types.paragraph(['20/30', '15/22.5'], { 
      span: 4, 
      color: '#ffffff',
      metaColor: '#ffffff',
      background: '#ff5555', 
      label: 'Custom label',
      xsmall: true,
      details: true,
      detect: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        The <code>detect: true</code> options is auto-detecting all meta data from the computed dom style.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph(['20/30', '15/22.5'], { 
        span: 4, 
        color: '#ffffff',
        metaColor: '#ffffff',
        background: '#ff5555', 
        label: 'Custom label',
        xsmall: true,
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraph with css class' %}
    {{ types.paragraph(['ds-demo-type-color'], { 
      span: 4, 
      cls: 'ds-demo-type-color-bg', 
      metaColor: '#ffffff',
      details: true,
      detect: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        Provide css class name as paragraph item and set <code>detect: true</code> to 
        auto detect details from existing css rules.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph(['ds-demo-type-color'], { 
        span: 4, 
        label: 'Section A',
        cls: 'ds-demo-type-color-bg', 
        metaColor: '#ffffff',
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Paragraph - items as objects' %}
    {{ types.paragraph([{
      cls: 'ds-demo-type-color',
      className: '.some-class-as-info, p',
      size: '1.2rem',
      line: '1.7rem',
      label: 'Secion',
      label: 'Promo Box',
      weight: 'normal',
      tracking: 1
    }], { 
      span: 4, 
      cls: 'ds-demo-type-color-bg', 
      color: '#ffffff',
      background: '#ff5555', 
      metaColor: '#ffffff',
      details: true,
      detect: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        Example of all available paragraph properties and options. 
        It inherits item definition and options from headings (except those specific to heading that doesn't make
        sense in paragraph context such as <code>level</code>).
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.paragraph([{
        cls: 'ds-demo-type-color',
        className: '.some-class, p',
        size: '1.2rem',
        line: '1.7rem',
        label: 'Secion',
        label: 'Promo Box',
        weight: 'normal',
        tracking: 1
      }], { 
        span: 4, 
        cls: 'ds-demo-type-color-bg', 
        color: '#ffffff',
        background: '#ff5555', 
        metaColor: '#ffffff',
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}


  {% dssection 'Custom types' %}
    {% dscodecell 6, 'njk', { toggle: false } %}
      {% raw %}
      {# Usage #}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {# Render in grid cell #}
      {{ types.custom(items, options) }}
      {# No grid #}
      {{ types.customTypes(items, options) }}
      {% endraw %}
    {% enddscodecell %}
    {% dscell 4 %}
      <div class="ds-typography--code">
        General use of the custom types macro. When rendered with grid, 
        <code>options.span</code> controls the cell span. 
      </div>
    {% enddscell %}
  {% enddssection %}



  {% dssection 'Custom types basic example' %}
    {{ types.custom(['strong', 'em'], { span: 6, background: '#f8f8f8', content: 'Custom content from options' }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        Basic custom type (think of tag) render based on provided tag name and background color, span and label options. 
        It renders <code>strong, em</code> applying only the provided options with no additional styling coming from the design system.
        The rest is up to your global application styles. 
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.custom(['strong', 'em'], { span: 6, background: '#f8f8f8', content: 'Custom content from options' }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Custom type options and definition' %}
    {{ types.custom([
      {
        tag: 'blockquote',
        content: 'Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed aliquam, nisi quis porttitor congue, elit erat euismod orci, ac placerat dolor lectus quis orci. Sed in libero ut nibh placerat accumsan. Donec orci lectus, aliquam ut, faucibus non, euismod id, nulla. Nulla facilisi. Nam at tortor in tellus interdum sagittis.',
        label: 'Quotes'
      },
      {
        tag: 'em',
        content: 'An emphasis example'
      }
    ], { 
      span: 4, 
      color: '#ffffff',
      metaColor: '#ffffff',
      background: '#ff5555', 
      label: 'Custom label from options',
      weight: 400,
      tracking: 'normal',
      small: true,
      details: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        The definition is the same as paragraph with the exception of <code>content, tag</code>.
        <code>xsmall | small | medium | large </code> options are not available as the predefined text is replaced by
        <code>content</code> definition key.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.custom([
        {
          tag: 'blockquote',
          content: 'A blockquote example',
          label: 'Quotes'
        },
        {
          tag: 'em',
          content: 'An emphasis example'
        }
      ], { 
        span: 4, 
        color: '#ffffff',
        metaColor: '#ffffff',
        background: '#ff5555', 
        label: 'Custom label from options',
        weight: 400,
        tracking: 'normal',
        small: true,
        details: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Custom type contrast rating' %}
    {% dsrow %}
      <div class="ds-typography--code">
        Detect automatically the contrast rating according to WCAG 2.0 standards via option <code>rating: true</code>.
        <code>detect: true</code> is not required in order this to work properly.
        <p>This is also an example of providing the <code>content</code> definition key via options.
      </div>
    {% enddsrow %}
    {{ types.custom(['em'], { 
      span: 3, 
      content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
      color: '#c0c0c0',
      background: '#ffffff', 
      metaColor: '#000',
      rating: true,
      small: true
    }) }}
    {{ types.custom(['strong'], { 
      span: 3, 
      content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
      color: '#ffffff',
      background: '#ff5555', 
      metaColor: '#ffffff',
      rating: true,
      small: true
    }) }}
    {{ types.custom(['code'], { 
      span: 3, 
      content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
      background: '#ffffff', 
      rating: true,
      small: true
    }) }}
    {{ types.custom(['blockquote'], { 
      span: 3, 
      content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
      background: 'rgba(255, 255, 255, 0.1)', 
      rating: true,
      small: true
    }) }}
    
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

        {{ types.custom(['em'], { 
          span: 3, 
          content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
          color: '#c0c0c0',
          background: '#ffffff', 
          metaColor: '#000',
          rating: true,
          small: true
        }) }}

        {{ types.custom(['strong'], { 
          span: 3, 
          content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
          color: '#ffffff',
          background: '#ff5555', 
          metaColor: '#ffffff',
          rating: true,
          small: true
        }) }}

        {{ types.custom(['code'], { 
          span: 3, 
          content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
          background: '#ffffff', 
          rating: true,
          small: true
        }) }}

        {{ types.custom(['blockquote'], { 
          span: 3, 
          content: 'Aenean ut eros et nisl sagittis vestibulum. Etiam ultricies nisi vel augue.',
          background: 'rgba(255, 255, 255, 0.1)', 
          rating: true,
          small: true
        }) }}

      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Custom types autodetect details' %}
    {{ types.custom(['blockquote'], { 
      span: 4, 
      color: '#ffffff',
      metaColor: '#ffffff',
      background: '#ff5555', 
      label: 'Custom label',
      details: true,
      detect: true
    }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        The <code>detect: true</code> option is auto-detecting all meta data from the computed dom style.
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.custom(['code', 'blockquote'], { 
        span: 4, 
        color: '#ffffff',
        metaColor: '#ffffff',
        background: '#ff5555', 
        label: 'Custom label',
        details: true,
        detect: true
      }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}

  {% dssection 'Types Collection' %}
    {% dscodecell 6, 'njk', { toggle: false } %}
      {% raw %}
      {# Usage #}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {# Render in grid cell #}
      {{ types.cell(items, options) }}
      {# No grid #}
      {{ types.types(items, options) }}
      {% endraw %}
    {% enddscodecell %}
    {% dscell 4 %}
      <div class="ds-typography--code">
        Combine <code>headings</code>, <code>paragraphs</code> and <code>custom</code> in a single view.
      </div>
    {% enddscell %}
  {% enddssection %}

  {% dssection 'Types example' %}
    {{ types.cell({ 
      headings: [38, 28, 21], 
      paragraphs: ['20/30', '15/22.5'],
      custom: [
        {
          tag: 'blockquote',
          content: 'Praesent ut ligula non mi varius sagittis. Curabitur blandit mollis lacus. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc.'
        },
        {
          tag: 'small',
          content: 'Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Quisque libero metus, condimentum nec, tempor a, commodo mollis, magna. Integer tincidunt.'
        }
      ]
    }, { span: 6, background: '#f8f8f8' }) }}
    {% dscell 4 %}
      <div class="ds-typography--code">
        General use of the <strong>type macro</strong>. <code>items</code> is an object 
        which may contain <code>headings: [items]</code> and/or <code>paragraphs: [items]</code> and/or <code>custom: [items]</code>
        in the format for each described above. <code>options.span</code> controls the grid's cell span. 
      </div>
    {% enddscell %}
    {% dscodecell 12, 'njk' %}
      {% raw %}
      {% import "@corllete/apos-ds-page-type:components/story/type.html" as types %}

      {{ types.cell({
        headings: [38, 28, 21], 
        paragraphs: ['20/30', '15/22.5'],
        custom: [
          {
            tag: 'blockquote',
            content: 'Praesent ut ligula non mi varius sagittis. Curabitur blandit mollis lacus. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc.'
          },
          {
            tag: 'small',
            content: 'Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Quisque libero metus, condimentum nec, tempor a, commodo mollis, magna. Integer tincidunt.'
          }
        ]
      }, { span: 6, background: '#f8f8f8' }) }}
      {% endraw %}
    {% enddscodecell %}
  {% enddssection %}
{% endblock %}

